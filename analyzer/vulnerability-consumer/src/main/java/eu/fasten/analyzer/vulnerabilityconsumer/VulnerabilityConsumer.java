/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityconsumer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import eu.fasten.analyzer.vulnerabilityconsumer.db.MetadataUtility;
import eu.fasten.analyzer.vulnerabilityconsumer.utils.PURLPackage;
import eu.fasten.analyzer.vulnerabilityconsumer.utils.Vulnerability;
import eu.fasten.core.plugins.DBConnector;
import eu.fasten.core.plugins.KafkaPlugin;
import org.jooq.DSLContext;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

public class VulnerabilityConsumer extends Plugin {

    public VulnerabilityConsumer(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityConsumerExtension implements KafkaPlugin, DBConnector {
        // The output are enriched statements (containing fasten URIs for vulnerable callable IDs)
        private String consumerTopic = "fasten.vulnerability.out";
        private String outputPath;
        private static Map<String, DSLContext> contexts;
        private Throwable pluginError = null;
        private String latestVulnJson = null;
        private ObjectMapper objectMapper = new ObjectMapper();
        private static DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        private final Logger logger = LoggerFactory.getLogger(VulnerabilityConsumerExtension.class.getName());

        @Override
        public void setDBConnection(Map<String, DSLContext> dslContexts) {
            this.contexts = dslContexts;
        }

        @Override
        public Optional<List<String>> consumeTopic() {
            return Optional.of(Collections.singletonList(consumerTopic));
        }

        @Override
        public void setTopic(String topicName) {
            this.consumerTopic = topicName;
        }

        @Override
        public void consume(String record) {
            // Step 1: Parse the record to a Vulnerability Object
            try {
                var v = objectMapper.readValue(record, Vulnerability.class);
                logger.info("Read vulnerability " + v.getId() + " from Kafka");
                // Step 2: Store the vulnerability object in the DB using the MetadataUtility
                var metadataUtility = new MetadataUtility();
                latestVulnJson = injectVulnerabilityIntoDB(v, metadataUtility);
                // Setting output path to save it
                logger.info("Setting output path to store the JSON statement for " + v.getId());
                outputPath = File.separator + "vuln" + File.separator + "consumer"
                        + File.separator + "statements" + File.separator + v.getId() + ".json";
            } catch (JsonProcessingException e) {
                logger.error("Could not parse record JSON");
                setPluginError(e);
            }
        }

        @Override
        public Optional<String> produce() {
            if (latestVulnJson == null) {
                return Optional.empty();
            } else {
                return Optional.of(latestVulnJson);
            }
        }

        @Override
        public String getOutputPath() {
            return outputPath;
        }

        @Override
        public String name() {
            return "Vulnerability Consumer";
        }

        @Override
        public String description() {
            return "Reads vulnerabilities from Vulnerability Producer Kafka" +
                    " and injects them in the DB.";
        }

        @Override
        public String version() {
            return "0.0.1";
        }

        @Override
        public void start() {
        }

        @Override
        public void stop() {

        }

        @Override
        public Throwable getPluginError() {
            return pluginError;
        }

        public void setPluginError(Throwable throwable) {
            this.pluginError = throwable;
        }

        @Override
        public void freeResource() {

        }

        /**
         * Method to inject the information contained in a Vulnerability Object.
         *
         * @param v               - Vulnerability Object
         * @param metadataUtility - Metadata DAO
         */
        public String injectVulnerabilityIntoDB(Vulnerability v, MetadataUtility metadataUtility) throws JsonProcessingException {
            logger.info("Injecting vulnerability " + v.getId() + " into the Database");
            // Find ecosystem of the vulnerability
            var context = v.getPurls().size() > 0 ? getVulnerabilityEcosystem(v) : null;
            if (context == null) return objectMapper.writeValueAsString(v);
            // Clean first_patched_purls
            v.setFirstPatchedPurls(v.getFirstPatchedPurls().stream()
                    .filter(Objects::nonNull).collect(Collectors.toList()));

            // Collect packageIds
            var pkgIds = metadataUtility.getPackageIds(context, v);
            if (pkgIds.size() == 0) return objectMapper.writeValueAsString(v);

            // Get IDs of vulnerable package coordinates
            var pkgVersionIds = metadataUtility.getPackageVersionIds(v.getPurls(), context,
                    pkgIds);

            // Get IDs of patched package coordinates
            var pkgVersionPatchedIds = metadataUtility.getPackageVersionIds(v.getFirstPatchedPurls(),
                    context, pkgIds);

            if (pkgVersionIds.size() == 0) return objectMapper.writeValueAsString(v);

            var fastenUris = new HashSet<String>();

            var latestVersionId = pkgVersionIds.get(pkgVersionIds.size() - 1);
            pkgVersionPatchedIds.add(latestVersionId);

            // For each version between patches (before or after), collects fasten_uri.
            for (Long pkgVersionId : pkgVersionPatchedIds) {
                for (Vulnerability.Patch p : v.getPatches()) {
                    logger.info("Searching for callables in " + p.getFileName() +
                            " for Package Version ID: " + pkgVersionId);
                    fastenUris.addAll(metadataUtility.getFastenUrisForPatch(p, pkgVersionId,
                            context));
                }
            }

            logger.info("Collected " + fastenUris.size() + " vulnerable fasten_uris ids");

            var fullFastenUris = new HashSet<String>();

            // Inject only in the vulnerable PURLs
            pkgVersionIds.forEach(id -> metadataUtility.injectPackageVersionVulnerability(v, id, context));

            for (String uri : fastenUris) {
                var callableIds = metadataUtility.getCallableIdsForFastenUri(uri, pkgVersionIds,
                        context);
                // Inject the metadata in the callable row
                for (Long id : callableIds) {
                    logger.info("Injecting into DB Callable with ID: " + id);
                    if (metadataUtility.injectCallableVulnerability(v, id, context) > 0) {
                        logger.info("Building the full fasten_uri for the injected callable");
                        fullFastenUris.add(metadataUtility.getFullFastenUri(uri, id));
                    }
                }
            }

            v.setFastenUris(fullFastenUris);
            writePatchDate(v);

            return objectMapper.writeValueAsString(v);
        }

        /**
         * Finds the correct DSLContext for the vulnerability given.
         *
         * @param v - vulnerability obj
         * @return DSLContext
         */
        public DSLContext getVulnerabilityEcosystem(Vulnerability v) {
            assert v.getPurls().size() > 0;
            var purl = v.getPurls().iterator().next();
            var purlObj = PURLPackage.getObjectFromPurl(purl);
            return contexts.get(purlObj.getType());
        }

        /**
         * Looks for the latest Patch Date and sets it
         *
         * @param v - Vulnerability Object
         */
        public static void writePatchDate(Vulnerability v) {
            if (v.getPatches().size() == 0) return;
            try {
                boolean set = false;
                var latestDate = sdf.parse("1950-01-01");
                for (Vulnerability.Patch patch : v.getPatches()) {
                    var patchDate = sdf.parse(patch.getPatchDate());
                    if (patchDate.after(latestDate)) {
                        latestDate = patchDate;
                        set = true;
                    }
                }
                if (set)
                    v.setPatchDate(sdf.format(latestDate));
            } catch (ParseException e) {
            }
        }

        /**
         * Purge Vulnerability entries from the DB.
         */
        public void purgeVulnerabilitiesFromDB() {
            logger.info("Purging ALL the databases from all vulnerability entries");
            var metadataUtility = new MetadataUtility();
            metadataUtility.purgeFromDB(contexts);
        }
    }
}
